/* 
 This file was generated by Dashcode.  
 You may edit this file to customize your widget or web page 
 according to the license.txt file included in the project.
 */

//
// This template also demonstrates how to make use of client-side database storage to store content that can be used, whether the application is online or offline.
// The database has one trivial table: a simple key-value table. You can imagine yourself having different tables with different columns, if you are familiar with relational database concepts.
//
// On devices that doesn't have the local database feature, the settings will not be remembered.
//

var database = null;                            // The client-side database
var DB_tableName = "SimpleKeyValueTable";       // database name
var originalSettings = {};                      // original message and settings, in case there is no client side database

var global_dm_unit = 'GiB,GB';

//
// Function: load()
// Called by HTML body element's onload event when the web application is ready to start
//
function load()
{
	var element = document.getElementById('message');
	if (element) {
		originalSettings.message = element.value;
		originalSettings.color = 'black'; // We only have a limited set of color chips, so use 'black' here.
		//var fontSettings = getFontSettingsFromElement(element);
		//originalSettings.fontFamily = fontSettings.fontFamily;
		//originalSettings.fontSize = fontSettings.fontSize;
		//element.value = '';
	}
	
	dashcode.setupParts();
	
	//initDB();
	//if (!database) {
	//    element.value = originalSettings.message;
	//}
}

//
// Function: flipToFront(event)
// Flip to the front view to show the normal utility view
//
function flipToFront(event)
{
	var views = document.getElementById('views');
	var front = document.getElementById('front');
	if (views && views.object && front) {
		views.object.setCurrentView(front, true);
	}
}

//
// Function: flipToSettings(event)
// Flip to the back view to present user customizable settings
//
function flipToSettings(event)
{
	var views = document.getElementById('views');
	var settings = document.getElementById('settings');
	if (views && views.object && settings) {
		views.object.setCurrentView(settings);
	}
}

//
// Function: showError(errorString)
// Show an error
//
// errorString: string to be displayed
//
function showError(errorString)
{
	var element = document.getElementById('message');
	element.value = errorString;
	element.setAttribute('style', 'font-family: Helvetica; font-weight: bold; color: rgb(178, 6, 40);');
}

//
// Function: updateSelectValue(selectElement, value)
// Update the settings UI so that the right popup value is selected
//
// selectElement: the element with the popup
// value: the new value
//
function updateSelectValue(selectElement, value)
{
	var options = selectElement.options;
	var i = 0;
	for (; i < options.length; i++) {
		if (options.item(i).value == value) break;
	}
	if (i < options.length) {
		selectElement.selectedIndex = i;
	}
}


///////////////////////////////////////////////////
///////////////////////////////////////////////////

function dm_from_amt_to_bytes(local_dm_unit, amt_value) {

    switch (local_dm_unit) {
        case 'nibbles': byte_value = amt_value / 2; break;
        case 'bytes': byte_value = amt_value; break;
        case 'blocks': byte_value = amt_value * 512; break;
        case 'KiB,KB': byte_value = amt_value * Math.pow(1024, 1); break;
        case 'MiB,MB': byte_value = amt_value * Math.pow(1024, 2); break;
        case 'GiB,GB': byte_value = amt_value * Math.pow(1024, 3); break;
        case 'TiB,TB': byte_value = amt_value * Math.pow(1024, 4); break;
        case 'PiB,PB': byte_value = amt_value * Math.pow(1024, 5); break;
        case 'KB Phys': byte_value = amt_value * Math.pow(1000, 1); break;
        case 'MB Phys': byte_value = amt_value * Math.pow(1000, 2); break;
        case 'GB Phys': byte_value = amt_value * Math.pow(1000, 3); break;
        case 'TB Phys': byte_value = amt_value * Math.pow(1000, 4); break;
        case 'PB Phys': byte_value = amt_value * Math.pow(1000, 5); break;
        case 'Floppy 1.44MiB': byte_value = amt_value * Math.pow(1024, 2) * 1.44; break;
        case 'CD': byte_value = amt_value * Math.pow(1024, 2) * 650; break;
        case 'DVD Single': byte_value = amt_value * Math.pow(1024, 3) * 4.37; break;
        case 'DVD Dual': byte_value = amt_value * Math.pow(1024, 3) * 7.95; break;
        case 'Blueray Single': byte_value = amt_value * Math.pow(1024, 3) * 23.28; break;
        case 'Blueray Dual': byte_value = amt_value * Math.pow(1024, 3) * 46.56; break;
        case 'Punch Card': byte_value = amt_value * 112; break;
        case 'Apollo Flight Computer': byte_value = amt_value * 76000; break;
        default: byte_value = 0;
    }

    return byte_value;
}

function dm_from_bytes_to_amt(local_dm_unit, byte_value) {

    switch (local_dm_unit) {
        case 'nibbles': amt_value = byte_value * 2; break;
        case 'bytes': amt_value = byte_value; break;
        case 'blocks': amt_value = byte_value / 512; break;
        case 'KiB,KB': amt_value = byte_value / Math.pow(1024, 1); break;
        case 'MiB,MB': amt_value = byte_value / Math.pow(1024, 2); break;
        case 'GiB,GB': amt_value = byte_value / Math.pow(1024, 3); break;
        case 'TiB,TB': amt_value = byte_value / Math.pow(1024, 4); break;
        case 'PiB,PB': amt_value = byte_value / Math.pow(1024, 5); break;
        case 'KB Phys': amt_value = byte_value / Math.pow(1000, 1); break;
        case 'MB Phys': amt_value = byte_value / Math.pow(1000, 2); break;
        case 'GB Phys': amt_value = byte_value / Math.pow(1000, 3); break;
        case 'TB Phys': amt_value = byte_value / Math.pow(1000, 4); break;
        case 'PB Phys': amt_value = byte_value / Math.pow(1000, 5); break;

        case 'Floppy 1.44MiB': amt_value = byte_value / Math.pow(1024, 2) / 1.44; break;
        case 'CD': amt_value = byte_value / Math.pow(1024, 2) / 650; break;
        case 'DVD Single': amt_value = byte_value / Math.pow(1024, 3) / 4.37; break;
        case 'DVD Dual': amt_value = byte_value / Math.pow(1024, 3) / 7.95; break;
        case 'Blueray Single': amt_value = byte_value / Math.pow(1024, 3) / 23.28; break;
        case 'Blueray Dual': amt_value = byte_value / Math.pow(1024, 3) / 46.56; break;
        case 'Punch Card': amt_value = byte_value / 112; break;
        case 'Apollo Flight Computer': amt_value = byte_value / 76000; break;

        //default : amt_value = 'Error'; 
    }

    /*
    This code isn't working right...
    if (!(amt_value == amt_value.toFixed(4))) {
    amt_value = amt_value.toFixed(4)    
    }
    */

    return amt_value;
}

function onchange_dm_unit(event)
{
	// Insert Code Here
	var amt_value = document.getElementById('textfield_data_amt').value;
	var dm_unit_value = document.getElementById('popup_dm_unit').value;
	var orig_dm_unit = global_dm_unit;
	var byte_value = 0;
	
	// First, convert the current amt value to bytes...
	byte_value = dm_from_amt_to_bytes(orig_dm_unit, amt_value);

	// Now, Convert the bytes_value to the desired unit...
    amt_value = dm_from_bytes_to_amt(dm_unit_value, byte_value);
  
	document.getElementById('textfield_data_amt').value = amt_value; 
	global_dm_unit = dm_unit_value;
	
	onchange_popup_transport();	
}

function onchange_popup_transport(event)
{
	var speed_ideal = 0; //speed is in MB/minute
	var time_days = 0; 
	var time_hours = 0;
	var time_minutes = 0;
	var amt_value = 0;
	var bytes_value = 0;
	var data_value = 0;
	var result = "";

	amt_value = document.getElementById('textfield_data_amt').value;
	
	// First, convert the current amt value to bytes...
	byte_value = dm_from_amt_to_bytes(global_dm_unit, amt_value);

	//Now convert bytes to megabytes to make the rest of the process easier....
	data_value = byte_value / Math.pow(1024,2);
	
	switch (document.getElementById('popup_transport').value) {
	
		case '10': speed_ideal = 75; break;
		case '20': speed_ideal = 750; break;
		case '30': speed_ideal = 7500; break;
		case '40': speed_ideal = 7500; break;
		case '50': speed_ideal = 12000; break;
		case '60': speed_ideal = 24000; break;
		case '70': speed_ideal = 24000; break;
		case '80': speed_ideal = 71.5256; break;
		case '90': speed_ideal = .04297; break;
		case '100': speed_ideal = 0.000035762787; break;
		case '110': speed_ideal = 0; break;

		default: speed_ideal = 0;
	}
		   
	time_minutes = data_value / speed_ideal;
	time_hours = time_minutes / 60;
	time_days = time_hours / 24;
	
	if (time_days < 999 ) 
	{
		total_days = Math.floor(time_days);
		
		total_hours = (time_days - Math.floor(time_days)) * 24;
		total_hours = Math.floor(total_hours);
		
		total_minutes = (time_hours - Math.floor(time_hours)) * 60;
		total_minutes = Math.ceil(total_minutes);

        // New Code
        if ( total_days + total_hours + total_minutes < 2 )  // 2 because of the Math.ceil on total_minutes...
            // The transfer is basically instant...
            result = 'Instantly';
        else {
            if (total_days > 0)
                result += total_days + ' days, ';
            if (total_hours > 0)
                result += total_hours + ' hours, ';
            result += total_minutes + ' minutes.';
        }

        document.getElementById('textfield_ideal_days').value = result;
        
        /////
		
		// Orig code
        // document.getElementById('textfield_ideal_days').value = total_days;
		// document.getElementById('textfield_ideal_hours').value = total_hours;
		// document.getElementById('textfield_ideal_minutes').value = total_minutes;
	}
	else
	{
		document.getElementById('textfield_ideal_days').value = 'Forever!';
		document.getElementById('textfield_ideal_hours').value = '';
		document.getElementById('textfield_ideal_minutes').value = '';
	}
}
